# Modificar mycp para que solicite argumentos si no se proporcionan. Una ejecución
# típica de la versión modificada debería verse así:
#
#       $ mycp
#       ¿Nombre del archivo de origen? voucher
#       ¿Nombre del archivo de destino? voucher.sv
#
# Asegurarse de que el programa permita que uno o ambos archivos se especifiquen
# con caracteres de sustitución de nombres de archivo (comodines como * o ?).

num_args=$#                   # Guardar esto para usarlo después
num_origen=-1
lista_archivos=
lista_copiar=
lista_faltantes=

#
# Procesar los argumentos, guardando todos menos el último en 'lista_archivos'.
#
while [ "$#" -gt 1 ]
do
    lista_archivos="$lista_archivos $1"
    shift
done

destino="$1"

#
# Si hay solo un argumento, o más de dos y el último no es un directorio,
# muestra un mensaje de error.
#
if [ "$num_args" -eq 1 ] || ([ "$num_args" -gt 2 ] && [ ! -d "$destino" ]); then
    echo "Uso: mycp ORIGEN DESTINO"
    echo "       mycp ORIGEN... DIRECTORIO"
    exit 1
fi

#
# Si no hay argumentos (cero), solicitarlos al usuario de forma interactiva.
#
if [ "$num_args" -eq 0 ]
then
    # Leer archivos de origen
    origen=' '
    while [ -n "$origen" ]
    do
	    printf 'Ingrese archivo de origen (presione Enter para terminar): '
	    read origen
	    lista_archivos="$lista_archivos $origen"

	    # Eliminar espacios en blanco iniciales
	    origen=$(printf "%s" "$origen" | sed "s/^[ \t]*//")
	    # Incrementar el contador de archivos de origen
	    : $((num_origen += 1))
    done
    
    # Verificar que se haya proporcionado al menos un archivo de origen
    if [ $num_origen -eq 0 ]
    then
	    echo "Error: se requiere especificar al menos un archivo de origen."
	    exit 1
    fi

    # Leer archivo de destino
    printf 'Ingrese archivo de destino: '
    read destino
    destino=$(printf "%s" "$destino" | sed "s/^[ \t]*//")
    if [ ! -n "$destino" ]
    then
	    echo "Error: argumento de destino no válido."
	    exit 1
    fi
fi

#
# Recorrer cada archivo en la 'lista_archivos'.
#
for origen in $lista_archivos
do
    #
    # Asegurarse de que el archivo de origen ($origen) exista.
    #
    if [ ! -f "$origen" ]
    then
        lista_faltantes="$lista_faltantes $origen"
        continue
    fi

    #
    # Comprobar si el destino es un directorio.
    #
    if [ -d "$destino" ]
    then
        archivo_destino="$destino/$(basename "$origen")"
    else
        archivo_destino="$destino"
    fi

    #
    # Añadir el archivo a 'lista_copiar' si el destino no existe
    # o si el usuario autoriza la sobreescritura.
    #
    if [ -e "$archivo_destino" ]
    then
        printf "'%s' ya existe; ¿sobrescribir (si/no)? " "$archivo_destino"
        read respuesta

        if [ "$respuesta" = "si" ]
        then
            lista_copiar="$lista_copiar $origen"
        fi
    else
        lista_copiar="$lista_copiar $origen"
    fi
done

#
# Verificar si hay archivos faltantes; si es así, preguntar al usuario
# si desea continuar copiando los restantes.
#
if [ -n "$lista_faltantes" ]
then
    echo "Los siguientes archivos no existen:$lista_faltantes"

    if [ -n "$lista_copiar" ]
    then
        printf "¿Deberían copiarse los archivos restantes (si/no)? "
        read respuesta

        if [ "$respuesta" != "si" ]
        then
            echo "Archivos no copiados."
            exit 0
        fi
    else
        echo "No quedan archivos por copiar."
        exit 0
    fi
fi

#
# Ahora, a realizar la copia. Primero, asegurarse de que haya algo que copiar.
# Esto es programación defensiva.
#
if [ -n "$lista_copiar" ]
then
    cp $lista_copiar "$destino"       # Proceder con la copia.
fi
